Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -g -std=c99 -Wall -Ofast -mtune=native -qopenmp -ffast-math -ftree-vectorize -fopt-info-vec-all -fno-trapping-math -fno-math-errno -xCORE-AVX2 -funroll-loops -mfpmath=sse -align -qopt-report=5 -qopt-report-phase:vec -lm -o openmp

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(179,3)
   remark #15523: loop was not vectorized: loop control variable tt was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at d2q9-bgk.c(779,3) inlined into d2q9-bgk.c(208,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(780,5) inlined into d2q9-bgk.c(208,10)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(780,5) inlined into d2q9-bgk.c(208,10)
      remark #15389: vectorization support: reference cells.s0[cellIndex] has unaligned access   [ d2q9-bgk.c(793,13) ]
      remark #15389: vectorization support: reference cells.s1[cellIndex] has unaligned access   [ d2q9-bgk.c(793,36) ]
      remark #15389: vectorization support: reference cells.s2[cellIndex] has unaligned access   [ d2q9-bgk.c(793,59) ]
      remark #15389: vectorization support: reference cells.s3[cellIndex] has unaligned access   [ d2q9-bgk.c(794,13) ]
      remark #15389: vectorization support: reference cells.s4[cellIndex] has unaligned access   [ d2q9-bgk.c(794,36) ]
      remark #15389: vectorization support: reference cells.s5[cellIndex] has unaligned access   [ d2q9-bgk.c(794,59) ]
      remark #15389: vectorization support: reference cells.s6[cellIndex] has unaligned access   [ d2q9-bgk.c(795,13) ]
      remark #15389: vectorization support: reference cells.s7[cellIndex] has unaligned access   [ d2q9-bgk.c(795,36) ]
      remark #15389: vectorization support: reference cells.s8[cellIndex] has unaligned access   [ d2q9-bgk.c(795,59) ]
      remark #15389: vectorization support: reference cells.s1[cellIndex] has unaligned access   [ d2q9-bgk.c(800,22) ]
      remark #15389: vectorization support: reference cells.s5[cellIndex] has unaligned access   [ d2q9-bgk.c(800,45) ]
      remark #15389: vectorization support: reference cells.s8[cellIndex] has unaligned access   [ d2q9-bgk.c(801,22) ]
      remark #15389: vectorization support: reference cells.s3[cellIndex] has unaligned access   [ d2q9-bgk.c(802,23) ]
      remark #15389: vectorization support: reference cells.s6[cellIndex] has unaligned access   [ d2q9-bgk.c(802,46) ]
      remark #15389: vectorization support: reference cells.s7[cellIndex] has unaligned access   [ d2q9-bgk.c(803,23) ]
      remark #15389: vectorization support: reference cells.s2[cellIndex] has unaligned access   [ d2q9-bgk.c(806,22) ]
      remark #15389: vectorization support: reference cells.s5[cellIndex] has unaligned access   [ d2q9-bgk.c(806,45) ]
      remark #15389: vectorization support: reference cells.s6[cellIndex] has unaligned access   [ d2q9-bgk.c(807,22) ]
      remark #15389: vectorization support: reference cells.s4[cellIndex] has unaligned access   [ d2q9-bgk.c(808,23) ]
      remark #15389: vectorization support: reference cells.s7[cellIndex] has unaligned access   [ d2q9-bgk.c(808,46) ]
      remark #15389: vectorization support: reference cells.s8[cellIndex] has unaligned access   [ d2q9-bgk.c(809,23) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.415
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(776,3) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(772,17) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 91 
      remark #15477: vector cost: 22.000 
      remark #15478: estimated potential speedup: 3.630 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(780,5) inlined into d2q9-bgk.c(208,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(236,1) inlined into d2q9-bgk.c(180,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(236,1) inlined into d2q9-bgk.c(180,5)
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(245,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(245,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(246,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(246,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(247,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(247,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(250,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(250,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(251,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(251,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(252,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(252,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.203
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15456: masked unaligned unit stride loads: 9 
   remark #15457: masked unaligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 46.870 
   remark #15478: estimated potential speedup: 0.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(236,1) inlined into d2q9-bgk.c(180,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: propagate(const t_param, t_speed_arr *, t_speed_arr *, int *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(271,3) inlined into d2q9-bgk.c(615,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(273,5) inlined into d2q9-bgk.c(615,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(364,7) inlined into d2q9-bgk.c(615,19)
         remark #15389: vectorization support: reference d_equ[_2+1] has unaligned access
         remark #15388: vectorization support: reference at (364:18) has aligned access   [ d2q9-bgk.c(364,18) ]
         remark #15389: vectorization support: reference u[_2+1] has unaligned access   [ d2q9-bgk.c(365,25) ]
         remark #15389: vectorization support: reference u[_2+1] has unaligned access   [ d2q9-bgk.c(365,45) ]
         remark #15389: vectorization support: reference u[_2+1] has unaligned access   [ d2q9-bgk.c(365,52) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.833
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 24 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 4.360 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(438,3) inlined into d2q9-bgk.c(615,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(440,5) inlined into d2q9-bgk.c(615,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(531,7) inlined into d2q9-bgk.c(615,19)
         remark #15389: vectorization support: reference d_equ[_2+1] has unaligned access
         remark #15388: vectorization support: reference at (531:18) has aligned access   [ d2q9-bgk.c(531,18) ]
         remark #15389: vectorization support: reference u[_2+1] has unaligned access   [ d2q9-bgk.c(532,25) ]
         remark #15389: vectorization support: reference u[_2+1] has unaligned access   [ d2q9-bgk.c(532,45) ]
         remark #15389: vectorization support: reference u[_2+1] has unaligned access   [ d2q9-bgk.c(532,52) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.833
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 24 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 4.360 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(620,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(622,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(622,5)
      remark #15389: vectorization support: reference obstacles[cellIndex] has unaligned access   [ d2q9-bgk.c(647,34) ]
      remark #15389: vectorization support: reference cells->s0[cellIndex] has unaligned access   [ d2q9-bgk.c(653,27) ]
      remark #15389: vectorization support: reference cells->s1[ii-1+jj*?] has unaligned access   [ d2q9-bgk.c(654,27) ]
      remark #15389: vectorization support: reference cells->s2[ii+(jj-1)*?] has unaligned access   [ d2q9-bgk.c(655,27) ]
      remark #15389: vectorization support: reference cells->s3[ii+1+jj*?] has unaligned access   [ d2q9-bgk.c(656,27) ]
      remark #15389: vectorization support: reference cells->s4[ii+(jj+1)*?] has unaligned access   [ d2q9-bgk.c(657,27) ]
      remark #15389: vectorization support: reference cells->s5[ii-1+(jj-1)*?] has unaligned access   [ d2q9-bgk.c(658,27) ]
      remark #15389: vectorization support: reference cells->s6[ii+1+(jj-1)*?] has unaligned access   [ d2q9-bgk.c(659,27) ]
      remark #15389: vectorization support: reference cells->s7[ii+1+(jj+1)*?] has unaligned access   [ d2q9-bgk.c(660,27) ]
      remark #15389: vectorization support: reference cells->s8[ii-1+(jj+1)*?] has unaligned access   [ d2q9-bgk.c(661,27) ]
      remark #15389: vectorization support: reference tmp_cells->s0[cellIndex] has unaligned access   [ d2q9-bgk.c(731,7) ]
      remark #15389: vectorization support: reference tmp_cells->s1[cellIndex] has unaligned access   [ d2q9-bgk.c(734,7) ]
      remark #15389: vectorization support: reference tmp_cells->s2[cellIndex] has unaligned access   [ d2q9-bgk.c(737,7) ]
      remark #15389: vectorization support: reference tmp_cells->s3[cellIndex] has unaligned access   [ d2q9-bgk.c(740,7) ]
      remark #15389: vectorization support: reference tmp_cells->s4[cellIndex] has unaligned access   [ d2q9-bgk.c(743,7) ]
      remark #15389: vectorization support: reference tmp_cells->s5[cellIndex] has unaligned access   [ d2q9-bgk.c(746,7) ]
      remark #15389: vectorization support: reference tmp_cells->s6[cellIndex] has unaligned access   [ d2q9-bgk.c(749,7) ]
      remark #15389: vectorization support: reference tmp_cells->s7[cellIndex] has unaligned access   [ d2q9-bgk.c(752,7) ]
      remark #15389: vectorization support: reference tmp_cells->s8[cellIndex] has unaligned access   [ d2q9-bgk.c(755,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.355
      remark #15355: vectorization support: at (760:7) is float type reduction   [ d2q9-bgk.c(760,7) ]
      remark #15355: vectorization support: at (762:7) is int type reduction   [ d2q9-bgk.c(762,7) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 10 
      remark #15451: unmasked unaligned unit stride stores: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 507 
      remark #15477: vector cost: 82.500 
      remark #15478: estimated potential speedup: 5.050 
      remark #15486: divides: 1 
      remark #15487: type converts: 21 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(622,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: write_values(const t_param, t_speed_arr *, int *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(1223,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1276,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between cells->s1 (1233:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1276:7)
   remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1276:7) and cells->s1 (1233:9)

   LOOP BEGIN at d2q9-bgk.c(1224,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1276,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between cells->s1 (1233:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1276:7)
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1276:7) and cells->s1 (1233:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1289,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1290,5) ]
LOOP END
===========================================================================

Begin optimization report for: timestep(const t_param, t_speed_arr *, t_speed_arr *, int *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(236,1) inlined into d2q9-bgk.c(221,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(236,1) inlined into d2q9-bgk.c(221,3)
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(245,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(245,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(246,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(246,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(247,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(247,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(250,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(250,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(251,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(251,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(252,7) ]
   remark #15389: vectorization support: reference *(cells+cellIndex*4) has unaligned access   [ d2q9-bgk.c(252,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.203
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15456: masked unaligned unit stride loads: 9 
   remark #15457: masked unaligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 46.870 
   remark #15478: estimated potential speedup: 0.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(236,1) inlined into d2q9-bgk.c(221,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: accelerate_flow(const t_param, t_speed_arr *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(236,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(236,1)
   remark #15389: vectorization support: reference *(cells->s1+cellIndex*4) has unaligned access   [ d2q9-bgk.c(245,7) ]
   remark #15389: vectorization support: reference *(cells->s1+cellIndex*4) has unaligned access   [ d2q9-bgk.c(245,7) ]
   remark #15389: vectorization support: reference *(cells->s5+cellIndex*4) has unaligned access   [ d2q9-bgk.c(246,7) ]
   remark #15389: vectorization support: reference *(cells->s5+cellIndex*4) has unaligned access   [ d2q9-bgk.c(246,7) ]
   remark #15389: vectorization support: reference *(cells->s8+cellIndex*4) has unaligned access   [ d2q9-bgk.c(247,7) ]
   remark #15389: vectorization support: reference *(cells->s8+cellIndex*4) has unaligned access   [ d2q9-bgk.c(247,7) ]
   remark #15389: vectorization support: reference *(cells->s3+cellIndex*4) has unaligned access   [ d2q9-bgk.c(250,7) ]
   remark #15389: vectorization support: reference *(cells->s3+cellIndex*4) has unaligned access   [ d2q9-bgk.c(250,7) ]
   remark #15389: vectorization support: reference *(cells->s6+cellIndex*4) has unaligned access   [ d2q9-bgk.c(251,7) ]
   remark #15389: vectorization support: reference *(cells->s6+cellIndex*4) has unaligned access   [ d2q9-bgk.c(251,7) ]
   remark #15389: vectorization support: reference *(cells->s7+cellIndex*4) has unaligned access   [ d2q9-bgk.c(252,7) ]
   remark #15389: vectorization support: reference *(cells->s7+cellIndex*4) has unaligned access   [ d2q9-bgk.c(252,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.203
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15456: masked unaligned unit stride loads: 9 
   remark #15457: masked unaligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 46.870 
   remark #15478: estimated potential speedup: 0.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(236,1)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: outEdges(const t_param, t_speed_arr *__restrict__, t_speed_arr *__restrict__, int *__restrict__, float *__restrict__, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(271,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(273,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(364,7)
         remark #15389: vectorization support: reference d_equ[_2+1] has unaligned access
         remark #15388: vectorization support: reference at (364:18) has aligned access   [ d2q9-bgk.c(364,18) ]
         remark #15389: vectorization support: reference u[_2+1] has unaligned access   [ d2q9-bgk.c(365,25) ]
         remark #15389: vectorization support: reference u[_2+1] has unaligned access   [ d2q9-bgk.c(365,45) ]
         remark #15389: vectorization support: reference u[_2+1] has unaligned access   [ d2q9-bgk.c(365,52) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.833
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 24 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 4.360 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(438,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(440,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(531,7)
         remark #15389: vectorization support: reference d_equ[_2+1] has unaligned access
         remark #15388: vectorization support: reference at (531:18) has aligned access   [ d2q9-bgk.c(531,18) ]
         remark #15389: vectorization support: reference u[_2+1] has unaligned access   [ d2q9-bgk.c(532,25) ]
         remark #15389: vectorization support: reference u[_2+1] has unaligned access   [ d2q9-bgk.c(532,45) ]
         remark #15389: vectorization support: reference u[_2+1] has unaligned access   [ d2q9-bgk.c(532,52) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.833
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 24 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 4.360 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed_arr *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(779,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(780,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(780,5)
      remark #15389: vectorization support: reference cells->s0[cellIndex] has unaligned access   [ d2q9-bgk.c(793,13) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(793,36) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(793,59) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(794,13) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(794,36) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(794,59) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(795,13) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(795,36) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(795,59) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(800,22) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(800,45) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(801,22) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(802,23) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(802,46) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(803,23) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(806,22) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(806,45) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(807,22) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(808,23) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(808,46) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(809,23) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.411
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(776,3) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(772,17) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 107 
      remark #15477: vector cost: 28.870 
      remark #15478: estimated potential speedup: 3.310 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(780,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed_arr *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(779,3) inlined into d2q9-bgk.c(1187,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(780,5) inlined into d2q9-bgk.c(1187,10)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(780,5) inlined into d2q9-bgk.c(1187,10)
      remark #15389: vectorization support: reference cells->s0[cellIndex] has unaligned access   [ d2q9-bgk.c(793,13) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(793,36) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(793,59) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(794,13) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(794,36) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(794,59) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(795,13) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(795,36) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(795,59) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(800,22) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(800,45) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(801,22) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(802,23) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(802,46) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(803,23) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(806,22) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(806,45) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(807,22) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(808,23) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(808,46) ]
      remark #15389: vectorization support: reference *(localDensRecip+cellIndex*4) has unaligned access   [ d2q9-bgk.c(809,23) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.411
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(776,3) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(772,17) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 107 
      remark #15477: vector cost: 28.870 
      remark #15478: estimated potential speedup: 3.310 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(780,5) inlined into d2q9-bgk.c(1187,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: total_density(const t_param, t_speed_arr *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(1194,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1195,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1195,5)
      remark #15389: vectorization support: reference cells->s0[cellIndex] has unaligned access   [ d2q9-bgk.c(1198,11) ]
      remark #15389: vectorization support: reference cells->s1[cellIndex] has unaligned access   [ d2q9-bgk.c(1198,34) ]
      remark #15389: vectorization support: reference cells->s2[cellIndex] has unaligned access   [ d2q9-bgk.c(1198,57) ]
      remark #15389: vectorization support: reference cells->s3[cellIndex] has unaligned access   [ d2q9-bgk.c(1199,11) ]
      remark #15389: vectorization support: reference cells->s4[cellIndex] has unaligned access   [ d2q9-bgk.c(1199,34) ]
      remark #15389: vectorization support: reference cells->s5[cellIndex] has unaligned access   [ d2q9-bgk.c(1199,57) ]
      remark #15389: vectorization support: reference cells->s6[cellIndex] has unaligned access   [ d2q9-bgk.c(1200,11) ]
      remark #15389: vectorization support: reference cells->s7[cellIndex] has unaligned access   [ d2q9-bgk.c(1200,34) ]
      remark #15389: vectorization support: reference cells->s8[cellIndex] has unaligned access   [ d2q9-bgk.c(1200,57) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.017
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(1192,15) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1195,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells->s0[cellIndex] has unaligned access   [ d2q9-bgk.c(1198,11) ]
      remark #15389: vectorization support: reference cells->s1[cellIndex] has unaligned access   [ d2q9-bgk.c(1198,34) ]
      remark #15389: vectorization support: reference cells->s2[cellIndex] has unaligned access   [ d2q9-bgk.c(1198,57) ]
      remark #15389: vectorization support: reference cells->s3[cellIndex] has unaligned access   [ d2q9-bgk.c(1199,11) ]
      remark #15389: vectorization support: reference cells->s4[cellIndex] has unaligned access   [ d2q9-bgk.c(1199,34) ]
      remark #15389: vectorization support: reference cells->s5[cellIndex] has unaligned access   [ d2q9-bgk.c(1199,57) ]
      remark #15389: vectorization support: reference cells->s6[cellIndex] has unaligned access   [ d2q9-bgk.c(1200,11) ]
      remark #15389: vectorization support: reference cells->s7[cellIndex] has unaligned access   [ d2q9-bgk.c(1200,34) ]
      remark #15389: vectorization support: reference cells->s8[cellIndex] has unaligned access   [ d2q9-bgk.c(1200,57) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 2.067
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(1192,15) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1195,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed_arr *, t_speed_arr *, int **, float **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(1113,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at d2q9-bgk.c(980,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between tmp_cells_ptr->s0[cellIndex] (984:7) and tmp_cells_ptr->s0[cellIndex] (984:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between tmp_cells_ptr->s0[cellIndex] (984:7) and tmp_cells_ptr->s0[cellIndex] (984:7)

   LOOP BEGIN at d2q9-bgk.c(981,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells_ptr->s0[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(984,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells_ptr->s1[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(986,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells_ptr->s2[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(987,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells_ptr->s3[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(988,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells_ptr->s4[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(989,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells_ptr->s5[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(991,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells_ptr->s6[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(992,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells_ptr->s7[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(993,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells_ptr->s8[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(994,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.045
      remark #15453: unmasked strided stores: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 32 
      remark #15477: vector cost: 49.500 
      remark #15478: estimated potential speedup: 0.640 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1000,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1001,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1001,5)
      remark #15389: vectorization support: reference tmp_cells_ptr->s0[cellIndex] has unaligned access   [ d2q9-bgk.c(1004,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s1[cellIndex] has unaligned access   [ d2q9-bgk.c(1006,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s2[cellIndex] has unaligned access   [ d2q9-bgk.c(1007,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s3[cellIndex] has unaligned access   [ d2q9-bgk.c(1008,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s4[cellIndex] has unaligned access   [ d2q9-bgk.c(1009,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s5[cellIndex] has unaligned access   [ d2q9-bgk.c(1011,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s6[cellIndex] has unaligned access   [ d2q9-bgk.c(1012,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s7[cellIndex] has unaligned access   [ d2q9-bgk.c(1013,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s8[cellIndex] has unaligned access   [ d2q9-bgk.c(1014,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 32 
      remark #15477: vector cost: 5.370 
      remark #15478: estimated potential speedup: 4.860 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1001,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1019,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1020,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1020,5)
      remark #15389: vectorization support: reference tmp_cells_ptr->s0[cellIndex] has unaligned access   [ d2q9-bgk.c(1023,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s1[cellIndex] has unaligned access   [ d2q9-bgk.c(1025,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s2[cellIndex] has unaligned access   [ d2q9-bgk.c(1026,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s3[cellIndex] has unaligned access   [ d2q9-bgk.c(1027,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s4[cellIndex] has unaligned access   [ d2q9-bgk.c(1028,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s5[cellIndex] has unaligned access   [ d2q9-bgk.c(1030,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s6[cellIndex] has unaligned access   [ d2q9-bgk.c(1031,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s7[cellIndex] has unaligned access   [ d2q9-bgk.c(1032,7) ]
      remark #15389: vectorization support: reference tmp_cells_ptr->s8[cellIndex] has unaligned access   [ d2q9-bgk.c(1033,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 32 
      remark #15477: vector cost: 5.370 
      remark #15478: estimated potential speedup: 4.860 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1020,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1039,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->s0[cellIndex] (1043:7) and cells_ptr->s0[cellIndex] (1043:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->s0[cellIndex] (1043:7) and cells_ptr->s0[cellIndex] (1043:7)

   LOOP BEGIN at d2q9-bgk.c(1040,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells_ptr->s0[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(1043,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells_ptr->s1[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(1045,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells_ptr->s2[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(1046,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells_ptr->s3[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(1047,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells_ptr->s4[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(1048,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells_ptr->s5[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(1050,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells_ptr->s6[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(1051,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells_ptr->s7[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(1052,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells_ptr->s8[cellIndex]>, stride is unknown to compiler   [ d2q9-bgk.c(1053,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.045
      remark #15453: unmasked strided stores: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 32 
      remark #15477: vector cost: 49.500 
      remark #15478: estimated potential speedup: 0.640 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1059,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1060,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1060,5)
      remark #15389: vectorization support: reference cells_ptr->s0[cellIndex] has unaligned access   [ d2q9-bgk.c(1063,7) ]
      remark #15389: vectorization support: reference cells_ptr->s1[cellIndex] has unaligned access   [ d2q9-bgk.c(1065,7) ]
      remark #15389: vectorization support: reference cells_ptr->s2[cellIndex] has unaligned access   [ d2q9-bgk.c(1066,7) ]
      remark #15389: vectorization support: reference cells_ptr->s3[cellIndex] has unaligned access   [ d2q9-bgk.c(1067,7) ]
      remark #15389: vectorization support: reference cells_ptr->s4[cellIndex] has unaligned access   [ d2q9-bgk.c(1068,7) ]
      remark #15389: vectorization support: reference cells_ptr->s5[cellIndex] has unaligned access   [ d2q9-bgk.c(1070,7) ]
      remark #15389: vectorization support: reference cells_ptr->s6[cellIndex] has unaligned access   [ d2q9-bgk.c(1071,7) ]
      remark #15389: vectorization support: reference cells_ptr->s7[cellIndex] has unaligned access   [ d2q9-bgk.c(1072,7) ]
      remark #15389: vectorization support: reference cells_ptr->s8[cellIndex] has unaligned access   [ d2q9-bgk.c(1073,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 32 
      remark #15477: vector cost: 5.370 
      remark #15478: estimated potential speedup: 4.860 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1060,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1078,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1079,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1079,5)
      remark #15389: vectorization support: reference cells_ptr->s0[cellIndex] has unaligned access   [ d2q9-bgk.c(1082,7) ]
      remark #15389: vectorization support: reference cells_ptr->s1[cellIndex] has unaligned access   [ d2q9-bgk.c(1084,7) ]
      remark #15389: vectorization support: reference cells_ptr->s2[cellIndex] has unaligned access   [ d2q9-bgk.c(1085,7) ]
      remark #15389: vectorization support: reference cells_ptr->s3[cellIndex] has unaligned access   [ d2q9-bgk.c(1086,7) ]
      remark #15389: vectorization support: reference cells_ptr->s4[cellIndex] has unaligned access   [ d2q9-bgk.c(1087,7) ]
      remark #15389: vectorization support: reference cells_ptr->s5[cellIndex] has unaligned access   [ d2q9-bgk.c(1089,7) ]
      remark #15389: vectorization support: reference cells_ptr->s6[cellIndex] has unaligned access   [ d2q9-bgk.c(1090,7) ]
      remark #15389: vectorization support: reference cells_ptr->s7[cellIndex] has unaligned access   [ d2q9-bgk.c(1091,7) ]
      remark #15389: vectorization support: reference cells_ptr->s8[cellIndex] has unaligned access   [ d2q9-bgk.c(1092,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 32 
      remark #15477: vector cost: 5.370 
      remark #15478: estimated potential speedup: 4.860 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1079,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1098,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1099,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(1099,5)
         remark #15389: vectorization support: reference *obstacles_ptr[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(1100,9) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 4.000 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(1099,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================
